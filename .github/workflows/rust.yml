name: Build and Release

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  PACKAGE_NAME: chatboto

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
            artifact_name: chatboto-linux-x86_64
            asset_name: chatboto-linux-x86_64.tar.gz
            
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-aarch64
            artifact_name: chatboto-linux-aarch64
            asset_name: chatboto-linux-aarch64.tar.gz
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            artifact_name: chatboto-windows-x86_64
            asset_name: chatboto-windows-x86_64.zip
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: ${{ matrix.target }}
        
    - name: Install Dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

    - name: Install Cross-compilation Tools (aarch64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        
    - name: Install Cargo Deb
      if: runner.os == 'Linux' && matrix.target == 'x86_64-unknown-linux-gnu'
      uses: actions-rs/cargo@v1
      with:
        command: install
        args: cargo-deb
        
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target ${{ matrix.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        
    - name: Package Windows Binaries
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p ${{ matrix.artifact_name }}
        cp target/${{ matrix.target }}/release/${{ env.PACKAGE_NAME }}.exe ${{ matrix.artifact_name }}/
        7z a ${{ matrix.asset_name }} ${{ matrix.artifact_name }}
        
    - name: Package Linux Binaries
      if: runner.os == 'Linux'
      run: |
        mkdir -p ${{ matrix.artifact_name }}/usr/bin
        cp target/${{ matrix.target }}/release/${{ env.PACKAGE_NAME }} ${{ matrix.artifact_name }}/usr/bin/
        tar -czvf ${{ matrix.asset_name }} ${{ matrix.artifact_name }}
        
    - name: Create DEB Package
      if: runner.os == 'Linux' && matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        cargo deb --target ${{ matrix.target }}
        cp target/${{ matrix.target }}/debian/*.deb chatboto-amd64.deb
        
    - name: Create Arch Linux Package
      if: runner.os == 'Linux' && matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        mkdir -p arch-pkg/usr/bin
        cp target/${{ matrix.target }}/release/${{ env.PACKAGE_NAME }} arch-pkg/usr/bin/
        tar -czvf chatboto-arch-x86_64.tar.gz -C arch-pkg .
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.asset_name }}
          chatboto-*.deb
          chatboto-*.rpm
          chatboto-arch-*.tar.gz

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: List files
        run: find . -type f -name "chatboto-*" | sort
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: |
            **/chatboto-*.tar.gz
            **/chatboto-*.zip
            **/chatboto-*.deb
            **/chatboto-*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
